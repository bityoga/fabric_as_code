# ---

# HLF CA CLI Services

# Stop all CLI Services services
- name: Stop CLI Service - {{ orderer.name }}_cli
  become: yes
  docker_swarm_service:
    name: "{{ orderer.name }}_cli"
    state: absent
    networks:
      - "{{swarm_network}}"  


- name: Clean CLI orderer folder in hlft-store
  become: yes
  file: 
    path: "/root/hlft-store/{{orderer.name}}_cli"
    state: absent    

- name: Create CLI orderer folder in hlft-store
  become: yes
  file: 
    path: "/root/hlft-store/{{orderer.name}}_cli"
    state: directory
    mode: 0750              

# Copy the relevent scripts
- name: Copy scripts
  become: yes
  copy:
    src: "cli.sh"
    dest: "/root/hlft-store/{{orderer.name}}_cli/cli.sh"
    mode: "0500"
    force: yes  

# # Generate the list of swarm managers to be used as Orderer Endpoints in configtx
# - name: Get IP addresses as a list for all swarm manager nodes
#   vars:
#     _swarm_manager_ip_list: "{{ groups['swarm_managers'] | map('extract', hostvars, ['ansible_host']) | list  | join(':{{orderer.port}},')  }}"            
#     __swarm_manager_ip_list: "{{_swarm_manager_ip_list}}:{{orderer.port}}"
#   set_fact:      
#     swarm_manager_ip_list: "{{ __swarm_manager_ip_list.split(',') }}"

  # Copy relevent config files to mount directories for the docker services
- name: Config templating configtx.yaml
  become: yes  
  template:
    src: "configtx.yaml.j2"
    dest: "/root/hlft-store/{{orderer.name}}_cli/configtx.yaml"
    mode: 0660
    force: yes  

# Prep the TLS certs
- name: Clean tls folder under /root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tls
  become: yes
  file:
    path: "/root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tls"
    state: absent
    mode: '0755'

# Prep the TLS certs
- name: Create tls folder under /root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tls
  become: yes
  file:
    path: "/root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tls"
    state: directory
    mode: '0755'

# Copy tls certs
- name: Copy TLS certs
  become: yes
  copy:
    src: "/root/hlft-store/{{tlsca.name}}/{{orderer.name}}/tls-msp/{{item[0]}}"
    dest: "/root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tls/{{item[1]}}"
    remote_src: yes
  loop:
    - ["tlscacerts/tls-{{tlsca.name}}-7054.pem", "ca.crt"]
    - ["signcerts/cert.pem", "server.crt"]
    - ["keystore/key.pem", "server.key"]

# Create ORG MSP folder and subfolders
- name: Clean org MSP-folder
  become: yes
  file: 
    path: "/root/hlft-store/{{org.name}}MSP"
    state: absent
    mode: '0755'

- name: Create org MSP-folder
  become: yes
  file: 
    path: "/root/hlft-store/{{org.name}}MSP"
    state: directory
    mode: '0755'

- name: Create subfolders folder under /root/hlft-store/{{org.name}}MSP
  become: yes
  file:
    path: "/root/hlft-store/{{org.name}}MSP/{{item}}"
    state: directory
    mode: '0755'
  loop:
    - "tlscacerts"
    - "admincerts"
    - "cacerts"
    - "users"

- name: Copy certs in the msp subfolder
  become: yes
  copy:
    src: "/root/hlft-store/{{item[0]}}"
    dest: "/root/hlft-store/{{org.name}}MSP/{{item[1]}}"
    remote_src: yes
  loop:
    - ["{{tlsca.name}}/{{orderer.name}}/tls-msp/tlscacerts/tls-{{tlsca.name}}-7054.pem", "tlscacerts/tls-{{tlsca.name}}-7054.pem"]
    - ["{{orgca.name}}/{{orderer.name}}/msp/admincerts/{{admin_user}}-cert.pem", "admincerts/{{admin_user}}-cert.pem"]
    - ["{{orgca.name}}/{{orderer.name}}/msp/cacerts/{{orgca.name}}-7054.pem", "cacerts/{{orgca.name}}-7054.pem"]    


  # Create & Start service for CLI
- name: Fabric Service - {{ orderer.name }}
  become: yes
  docker_swarm_service:
    #restart_policy: "on-failure"
    restart_config:
      condition : "on-failure"
    name: "{{ orderer.name }}_cli"
    hostname: "{{ orderer.name }}_cli"
    networks:
      - "{{swarm_network}}"
    image: "{{cli.image}}:{{cli.tag}}"
    mode: replicated
    replicas: "-1"
    command: >
      bash -c "/root/{{orderer.name}}_cli/cli.sh;"
    mounts:
      # MSP folder for organization in configtx
      - source: "/root/hlft-store/{{org.name}}MSP"
        target: "/root/{{org.name}}MSP"
        type: bind
      # CONCENTER TLS CERT
      - source: "/root/hlft-store/{{orgca.name}}/{{orderer.name}}"
        target: "{{orderer.path}}"
        type: bind       
      # CLI dir
      - source: "/root/hlft-store/{{orderer.name}}_cli/"
        target: "/root/{{orderer.name}}_cli"
        type: bind
    env:
      - "HOST_HOME=/root/{{orderer.name}}_cli"
      - "ORG={{org.name}}"
    working_dir: "/root/{{orderer.name}}_cli"
    placement:
      constraints:
        - node.role == worker
    force_update: yes  
  when: orderer.switch == "on"

# Pause for 5 seconds for genesis block to be created.
- name: Pause for 5 seconds for genesis block to be created.
  pause:
      seconds: "5"
